/**
 * @packageDocumentation
 *
 * A Datastore implementation with a file system backend.
 *
 * @example
 *
 * ```js
 * import { FsDatastore } from 'datastore-fs'
 *
 * const store = new FsDatastore('path/to/store')
 * ```
 */
import { BaseDatastore } from 'datastore-core';
import { Key, type KeyQuery, type Pair, type Query } from 'interface-datastore';
import type { AwaitIterable } from 'interface-store';
export interface FsDatastoreInit {
    createIfMissing?: boolean;
    errorIfExists?: boolean;
    extension?: string;
    putManyConcurrency?: number;
    getManyConcurrency?: number;
    deleteManyConcurrency?: number;
}
/**
 * A datastore backed by the file system.
 *
 * Keys need to be sanitized before use, as they are written
 * to the file system as is.
 */
export declare class FsDatastore extends BaseDatastore {
    path: string;
    private readonly createIfMissing;
    private readonly errorIfExists;
    private readonly extension;
    private readonly deleteManyConcurrency;
    private readonly getManyConcurrency;
    private readonly putManyConcurrency;
    constructor(location: string, init?: FsDatastoreInit);
    open(): Promise<void>;
    close(): Promise<void>;
    /**
     * Calculate the directory and file name for a given key.
     */
    _encode(key: Key): {
        dir: string;
        file: string;
    };
    /**
     * Calculate the original key, given the file name.
     */
    _decode(file: string): Key;
    /**
     * Store the given value under the key
     */
    put(key: Key, val: Uint8Array): Promise<Key>;
    putMany(source: AwaitIterable<Pair>): AsyncIterable<Key>;
    /**
     * Read from the file system
     */
    get(key: Key): Promise<Uint8Array>;
    getMany(source: AwaitIterable<Key>): AsyncIterable<Pair>;
    deleteMany(source: AwaitIterable<Key>): AsyncIterable<Key>;
    /**
     * Check for the existence of the given key
     */
    has(key: Key): Promise<boolean>;
    /**
     * Delete the record under the given key
     */
    delete(key: Key): Promise<void>;
    _all(q: Query): AsyncIterable<Pair>;
    _allKeys(q: KeyQuery): AsyncIterable<Key>;
}
//# sourceMappingURL=index.d.ts.map